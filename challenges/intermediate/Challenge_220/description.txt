https://www.reddit.com/r/dailyprogrammer/comments/3axjac/20150624_challenge_220_intermediate_its_go_time/
#  _(Intermediate)_ : It's Go time!

[Go](https://en.wikipedia.org/wiki/Go_\(game\)) is a
board game involving placing black and white stones on
a grid. Two opponents take turns to place stones; one
player places white stones, the other black. Stones of
the same colour form a _group_ , as long as they're all
connected via the cardinal axes. The leftmost pair of
stones (represented by `#`) below are valid groups, and
the rightmost pair are not.

[code]

    #      ###   #     ##  
    ###    # #   #      ##  
     ##    ###    ##      ## 
      #     #      #       ##
    
[/code]

Now, when a player places stones such that a group of
the opponent's colour is touching no more open spaces (
_liberties_ ), then that group is removed from play.
The edges of the board do **not** count as open spaces.
Let the black stones be represented by `b` and white
stones by `w`. Here, the player plays as the black
stones.

[code]

    bbbbb
     wwwb
    bwbwb
     bbbb
    
[/code]

Let `B` be the stone I place in the next turn. If I
place the stone here:

[code]

    bbbbb
    Bwwwb
    bwbwb
     bbbb
    
[/code]

The white group is entirely enclosed by the black
group, and so the white group is removed from play.  
If a situation were to arise where both your own and
your opponent's stones would be removed, your
opponent's stones would be removed first, and then
(only if your stones still need to be removed) your own
stones would be removed.

_Liberties_ don 't need to be outside of the group;
they can be inside the group, too. These are called
_eyes_. Here, the white group survives, as it has the
eye:

[code]

     bbbbb
    bbwwwwb
    bww wb
     bwwwwb
      bbbbb
    
[/code]

Your challenge today is to determine the location on
the board which, when a stone of your own colour is
placed there, will remove the greatest number of your
opponent's stones.

# Formal Inputs and Outputs

## Input Description

You will be given the size of the grid as a width and a
height. Next, you will be given the player's colour -
either `b` or `w`. Finally, you will be given a grid of
the appropriate dimensions, using the format I used in
the Description: spaces for empty grid regions, and `b`
and `w` for stones of either colour.

## Output Description

Output the co-ordinate of the location which, if you
were to place a stone of your own colour there, would
result in the greatest number of your opponent's stones
being removed. The top-left corner is location `(0,
0)`.

# Sample Inputs and Outputs

### Input

[code]

    7 5
    b      
     bbbbb 
    bbwwwwb
    bww wb 
     bwwwwb
      bbbbb
    
[/code]

### Output

[code]

    (3, 2)
    
[/code]

### Input

[code]

    9 11
    w
        ww   
      wwbbbw 
      wbbbbw 
     wwbbbbw 
     wwwwwww 
     wbbbbww 
     wbwbbww 
     wbwbbww 
     wwwbbww 
        wbw  
        w    
    
[/code]

### Output

[code]

    (5, 10)
    
[/code]

### Input

[code]

    7 7
    w
    w w w w
     bbbbb 
    wbbbbbw
     bbbbb 
    wbbbbbw
     bbbbb 
    w w w w
    
[/code]

### Output

[code]

    No constructive move
    
[/code]

## Sample 4

### Input

[code]

    4 3
    b
     bw 
    bw w
     bw 
    
[/code]

### Output

[code]

    (2, 1)
    
[/code]

## Sample 5

(thanks to [/u/adrian17](/u/adrian17))

### Input

[code]

    7 5
    b
     bb bb 
    bww wwb
     bbbbb 
    bwwwb  
     bb    
    
[/code]

### Output

[code]

    (3, 1)
    
[/code]

# Notes

I apologise beforehand to any Go players for presenting
such unrealistic scenarios!

Got any cool challenge ideas? Post them to
[/r/DailyProgrammer_Ideas](/r/DailyProgrammer_Ideas)!

