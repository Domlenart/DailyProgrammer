https://www.reddit.com/r/dailyprogrammer/comments/3h0uki/20150814_challenge_227_hard_adjacency_matrix/
#  _(Hard)_ : Adjacency Matrix Generator

We've often talked about adjacency matrices in
challenges before. Usually, the adjacency matrix is the
input to a challenge. This time, however, we're going
to be taking a visual representation of a graph as
input, and turning it into the adjacency matrix. Here's
the rules for the input diagrams:

  * Vertices are represented by lower-case letters A to Z. (There will be no more than 26 vertices in an input.) Vertices will be connected by no more than one edge.
  * All edges on the diagram are perfectly straight, are at least one character long, and will go either horizontally, vertically, or diagonally at 45 degrees.
  * All edges must connect directly to two vertices at either end.
[code]     a------------b  f

                    |     g
        c           |    /
         \          e   /
          \            /
           \          /
            \        h
             d
    
[/code]

These are all valid vertices..

[code]

    a-----
          -----b
    
    
    
          cd
    
[/code]

But these aren't. A and B aren't connected, and neither
are C and D.

If a line on the graph needs to bend, then spare
vertices can be added. There are represented with a `#`
and don't appear on the output, but otherwise behave
like vertices:

[code]

       s
        \
         \
          \
           \
            #-----------t
    
[/code]

This above diagram represents just one edge between `s`
and `t`. **A spare vertex will always be connected to
exactly two edges**.

  * Finally, edges may cross over other edges. One will go on top of the other, like this:
[code]              a

            /|
           / |
    d---------------e
     \   /   |
      \ /    |
       c     |
             |
             b
    
[/code]

An edge will never cross under/over a vertex as that
would cause ambiguity. However, an edge may cross under
or over multiple other edges successively, like so:

[code]

        e
    b   |
     \  |g
      \ ||
        \|
    s---|\----t
        ||\
        || \
        f|  \
         |   c
         h
    
[/code]

This is also valid - `a` and `b` are connected:

[code]

        z  y  x  w
      a-|\-|\-|\-|-b
        | \| \| \| 
        v  u  t  s
    
[/code]

However, this is not valid:

[code]

        zy
     a  ||
      \ ||
       #||--b
        ||
        ||
        xw
    
[/code]

As there is no edge coming out of the right side of the
`#`.

Your challenge today is to take a diagram such as the
above ones and turn it into an adjacency matrix.

# Formal Inputs and Outputs

## Input Specification

You'll be given a number **N** \- this is the number of
lines in the diagram. Next, accept **N** lines of a
diagram such as the ones above, like:

[code]

    7
    a-----b
    |\   / \
    | \ /   \
    |  /     e
    | / \   /
    |/   \ /
    c-----d
    
[/code]

## Output Description

Output the corresponding adjacency matrix. The rows and
columns should be ordered in alphabetical order, like
this:

[code]

    01110
    10101
    11010
    10101
    01010
    
[/code]

So the leftmost column and topmost row correspond to
the vertex A.

# Sample Inputs and Outputs

## Example 1

### Input

[code]

    5
    a
    |\
    | \
    |  \
    b---c
    
[/code]

### Output

[code]

    011
    101
    110
    
[/code]

## Example 2

### Input

[code]

    7
    a  b--c
    |    /
    |   /
    d  e--f
     \    |
      \   |
    g--h--#
    
[/code]

### Output

[code]

    00010000
    00100000
    01001000
    10000001
    00100100
    00001001
    00000001
    00010110
    
[/code]

## Example 3

### Input

[code]

    5
    a   #   #   #   #   #   #   b
     \ / \ / \ / \ / \ / \ / \ / \
      /   /   /   /   /   /   /   #
     / \ / \ / \ / \ / \ / \ / \ /
    c   #   #   #   #   #   #   d
    
[/code]

### Output

[code]

    0001
    0011
    0100
    1100
    
[/code]

## Example 4

### Input

[code]

    5
        ab-#
    # e-|\-|-#
    |\ \# c# |
    | #-#\| \|
    #-----d  #
    
[/code]

### Output

[code]

    00110
    00001
    10010
    10101
    01010
    
[/code]

## Sample 5

### Input

[code]

    9
       #--#
       | /        #
       |a--------/-\-#
      #--\-c----d   /
       \  \|     \ / \
       |\  b      #   #
       | #  \        /
       |/    #------#
       #
    
[/code]

### Output

[code]

    0111
    1011
    1101
    1110
    
[/code]

# Finally

Got any cool challenge ideas? Submit them to
[/r/DailyProgrammer_Ideas](/r/DailyProgrammer_Ideas)!

