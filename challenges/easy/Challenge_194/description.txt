#  **(Easy)** : Destringification

Most programming languages understand the concept of
escaping strings. For example, if you wanted to put a
double-quote `"` into a string that is delimited by
double quotes, you can't just do this:

[code]

    "this string contains " a quote."
    
[/code]

That would end the string after the word _contains_ ,
causing a syntax error. To remedy this, you can prefix
the quote with a backslash `\` to _escape_ the
character.

[code]

    "this string really does \" contain a quote."
    
[/code]

However, what if you wanted to type a backslash
instead? For example:

[code]

    "the end of this string contains a backslash. \"
    
[/code]

The parser would think the string never ends, as that
last quote is escaped! The obvious fix is to also
escape the back-slashes, like so.

[code]

    "lorem ipsum dolor sit amet \\\\"
    
[/code]

The same goes for putting newlines in strings. To make
a string that spans two lines, you cannot put a line
break in the string literal:

[code]

    "this string...
    ...spans two lines!"
    
[/code]

The parser would reach the end of the first line and
panic! This is fixed by replacing the newline with a
special escape code, such as `\n`:

[code]

    "a new line \n hath begun."
    
[/code]

Your task is, given an escaped string, un-escape it to
produce what the parser would understand.

## Input Description

You will accept a string literal, surrounded by quotes,
like the following:

[code]

    "A random\nstring\\\""
    
[/code]

If the string is valid, un-escape it. If it's not (like
if the string doesn't end), throw an error!

## Output Description

Expand it into its true form, for example:

[code]

    A random
    string\"
    
[/code]

# Sample Inputs and Outputs

## Sample Input

[code]

    "hello,\nworld!"
    
[/code]

## Sample Output

[code]

    hello,
    world!
    
[/code]

## Sample Input

[code]

    "\"\\\""
    
[/code]

## Sample Output

[code]

    "\"
    
[/code]

## Sample Input

[code]

    "an invalid\nstring\"
    
[/code]

## Sample Output

Invalid string! (Doesn't end)

## Sample Input

[code]

    "another invalid string \q"
    
[/code]

## Sample Output

Invalid string! (Bad escape code, `\q`)

# Extension

Extend your program to support entering multiple string
literals:

[code]

    "hello\nhello again" "\\\"world!\\\""
    
[/code]

The gap between string literals can only be whitespace
(ie. new lines, spaces, tabs.) Anything else, throw an
error. Output like the following for the above:

[code]

    String 1:
    hello
    hello again
    
    String 2:
    \"world!\"
    
[/code]

